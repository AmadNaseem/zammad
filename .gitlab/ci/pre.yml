# Workaround to enable usage of mixed SSH and Docker GitLab CI runners
.template_pre: &template_pre
  stage: pre
  extends:
    - .job_rules_default
  before_script:
    - source /etc/profile.d/rvm.sh # ensure RVM is loaded

# Write CI cache once for faster runs
# Do not use anchor, it's gonna miss at least the relevant tag required
'write runner cache':
  <<: *template_pre
  cache: !reference [.cache, read_write]
  script:
    - bundle config set --local frozen 'true'
    - bundle config set --local path 'vendor'
    - bundle install -j $(nproc)
    - yarn install

# Executed on a dedicated runner.
'push to github':
  <<: *template_pre
  before_script:
    - test -d $HOME/.ssh || mkdir $HOME/.ssh
    - ssh-keyscan github.com >> $HOME/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - echo "$PUSH_TO_GITHUB_SSH_PRIVATE_KEY" | ssh-add -
    - ssh-add -l
  script:
    - git fetch --unshallow
    - script/build/sync_repo.sh git@github.com:zammad/zammad.git

'refresh global envs':
  extends:
    - .services_postgresql
  stage: pre
  needs:
    - "write runner cache"
  # ensure that only one Job runs in the whole project (branches etc.)
  resource_group: global_refresh_envs
  # allow download via the web UI to restore ENVs in case global cache got deleted (see: `.gitlab-ci.yml`)
  artifacts:
    expire_in: 1 week
    paths:
      - fresh.env
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^private/'
      when: manual
      allow_failure: true
    - when: on_success
  script:
    - bundle exec rake zammad:ci:refresh_envs
